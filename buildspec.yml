version: 0.2

env:
  secrets-manager:
    DOCKER_USERNAME: "arn:aws:secretsmanager:us-east-1:635462603772:secret:spring-boot-app-sm-HBn031:DOCKER_USERNAME"
    DOCKER_PASSWORD: "arn:aws:secretsmanager:us-east-1:635462603772:secret:spring-boot-app-sm-HBn031:DOCKER_PASSWORD"
    ECR_URL: "arn:aws:secretsmanager:us-east-1:635462603772:secret:spring-boot-app-sm-HBn031:ECR_URL"
    ECR_REPOSITORY_NAME: "arn:aws:secretsmanager:us-east-1:635462603772:secret:spring-boot-app-sm-HBn031:ECR_REPOSITORY_NAME"
    ECR_URI: "arn:aws:secretsmanager:us-east-1:635462603772:secret:spring-boot-app-sm-HBn031:ECR_URI"
    IMAGE_TAG: "arn:aws:secretsmanager:us-east-1:635462603772:secret:spring-boot-app-sm-HBn031:IMAGE_TAG"

phases:
  pre_build:
    commands:
      - echo "Starting pre-build..."
      # Build the Spring Boot application JAR file using Maven
      # mvn clean package -DskipTests

      - echo "Logging to Docker Hub..."
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD

      - echo "Logging to AWS ECR"
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_URL
  build:
    commands:
      - echo "Building Docker image..."
      - docker build -f Dockerfile.dev -t $ECR_REPOSITORY_NAME .
  post_build:
    commands:
      - echo "Pushing Docker image to ECR..."
      - docker tag $ECR_REPOSITORY_NAME:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
      - docker push $ECR_URI:$IMAGE_TAG
artifacts:
  files:
    - target/demo-sprint-boot-0.0.1-SNAPSHOT.jar
    - imagedefinitions.json # Include the imagedefinitions file as artifact